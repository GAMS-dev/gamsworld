*
***************************
* SET UP THE INITIAL DATA *
***************************
*   Problem :
*   *********
*   A quadratic obstacle problem by Dembo and Tulowitzki
*   The problem comes from the obstacle problem on a rectangle.
*   The rectangle is discretized into (px-1)(py-1) little rectangles. The
*   heights of the considered surface above the corners of these little
*   rectangles are the problem variables,  There are px*py of them.
*   Source:
*   R. Dembo and U. Tulowitzki,
*   "On the minimization of quadratic functions subject to box
*   constraints",
*   WP 71, Yale University (new Haven, USA), 1983.
*   See also More 1989 (Problem B, Starting point U)
*   SIF input: Ph. Toint, Dec 1989.
*   classification QBR2-AY-V-0
*   PX is the number of points along the X side of the rectangle
*   PY is the number of points along the Y side of the rectangle
*IE PX                  4              $ n = 16
*IE PY                  4
*IE PX                  23             $ n = 529
*IE PY                  23
*IE PX                  32             $ n = 1024
*IE PY                  32
*IE PX                  75             $ n = 5625
*IE PY                  75
*IE PX                  100            $ n = 10000
*IE PY                  100
*IE PX                  125            $ n = 15625
*IE PY                  125
*   The force constant
*   Define a few helpful parameters
*   Define one variable per discretized point in the unit square
*   Define a group per interior node
*   Fix the variables on the lower and upper edges of the unit square
*   Fix the variables on the left and right edges of the unit square
*   Describe the lower obstacle (problem B)
*   Describe the upper obstacle (problem B)
*   Start from the boundary values on the lower and upper edges
*   Start from the boundary values on the left and right edges
*   Describe the upper obstacle (starting point U)
*   Each node has four elements
*   Solution
*LO SOLTN(4)            -0.0081108
*LO SOLTN(10)           2.87503823
*LO SOLTN(23)           6.51932527
*LO SOLTN(32)           6.88708670
*LO SOLTN(75)           ???
*LO SOLTN(100)          ???
$offdigit;
Parameter     px ;     px = 10;
Parameter     py ;     py = 10;
Parameter      c ;      c = 1.0;
Parameter   pxm1 ;   pxm1 = -1 + (10);
Parameter  rpxm1 ;  rpxm1 = 9.0;
Parameter     hx ;     hx = 1.0 / (9.0);
Parameter   pym1 ;   pym1 = -1 + (10);
Parameter  rpym1 ;  rpym1 = 9.0;
Parameter     hy ;     hy = 1.0 / (9.0);
Parameter   hxhy ;   hxhy = (1.0 / (9.0)) * (1.0 / (9.0));
Parameter  hxdhy ;  hxdhy = (1.0 / (9.0)) * (1.0 / (1.0 / (9.0)));
Parameter  hydhx ;  hydhx = (1.0 / (9.0)) * (1.0 / (1.0 / (9.0)));
Parameter hyd4hx ; hyd4hx = 0.25 * ((1.0 / (9.0)) * (1.0 / (1.0 /(9.0))));
Parameter hxd4hy ; hxd4hy = 0.25 * ((1.0 / (9.0)) * (1.0 / (1.0 /(9.0))));
Parameter     c0 ;     c0 = ((1.0 / (9.0)) * (1.0 / (9.0))) * (1.0);
Parameter     lc ;     lc = -1.0 * (((1.0 / (9.0)) * (1.0 / (9.0))) * (1.0));
Parameter    im1 ;    im1 = -1 + (9);
Parameter   rim1 ;   rim1 = 8.0;
Parameter   xsi1 ;   xsi1 = (8.0) * (1.0 / (9.0));
Parameter  sxsi1 ;  sxsi1 = sin(9.2 * ((8.0) * (1.0 / (9.0))));
Parameter    jm1 ;    jm1 = -1 + (9);
Parameter   rjm1 ;   rjm1 = 8.0;
Parameter   xsi2 ;   xsi2 = (8.0) * (1.0 / (9.0));
Parameter  sxsi2 ;  sxsi2 = sin(9.3 * ((8.0) * (1.0 / (9.0))));
Parameter     l1 ;     l1 = (sin(9.2 * ((8.0) * (1.0 / (9.0))))) * (sin(9.3 *
                           ((8.0) * (1.0 /(9.0)))));
Parameter     l2 ;     l2 = ((sin(9.2 * ((8.0) * (1.0 / (9.0))))) * (sin(9.3
                           * ((8.0) * (1.0 /(9.0)))))) * ((sin(9.2 * ((8.0) *
                           (1/(9))))) * (sin(9.3 * ((8.0) * (1.0 /(9.0))))));
Parameter    low ;    low = (((sin(9.2 * ((8.0) * (1.0 / (9.0))))) *
                           (sin(9.3 * ((8.0) * (1.0
                           /9))))) * ((sin(9.2 * ((8.0) * (1.0 / (9.0))))) *
                           (sin(9.3 * ((8.0) * (1.0
                           /9)))))) * ((sin(9.2 * ((8.0) * (1.0 / (9.0))))) *
                           (sin(9.3 * ((8.0) * (1.0 / (9.0))))));
Parameter    upp ;    upp = 0.02 + (((sin(9.2 * ((8.0) * (1.0 / (9.0))))) *
                           (sin(9.3 * ((8.0)
                           * (1/9))))) * ((sin(9.2 * ((8.0) * (1.0 / (9.0)))))
                           * (sin(9.3 * ((8.0) * (1.0 / (9.0)))))));
Parameter    ip1 ;    ip1 = 1 + (9);
Parameter    jp1 ;    jp1 = 1 + (9);

Positive Variable x1_1 , x2_1 , x3_1 , x4_1 , x5_1  ,
                  x6_1 , x7_1 , x8_1 , x9_1 , x10_1 ,
                  x1_2 , x2_2 , x3_2 , x4_2 ,
                                x8_2 , x9_2 , x10_2 ,
                  x1_3 , x2_3 , x3_3 , x4_3 ,
                                x8_3 , x9_3 , x10_3 ,
                  x1_4 , x2_4 , x3_4 , x4_4 ,
                                x8_4 , x9_4 , x10_4 ,
                  x1_5 ,                      x5_5  ,
                  x6_5 , x7_5 ,               x10_5 ,
                  x1_6 ,                      x5_6  ,
                  x6_6 , x7_6 ,               x10_6 ,
                  x1_7 ,                      x5_7  ,
                  x6_7 , x7_7 ,               x10_7 ,
                  x1_8 , x2_8 , x3_8 , x4_8 ,
                                x8_8 , x9_8 , x10_8 ,
                  x1_9 , x2_9 , x3_9 , x4_9 ,
                                x8_9 , x9_9 , x10_9 ,
                 x1_10 ,x2_10 ,x3_10 ,x4_10 , x5_10 ,
                 x6_10 ,x7_10 ,x8_10 ,x9_10 ,x10_10 ;

Variable x5_2 , x6_2 , x7_2 , x5_3 , x6_3 , x7_3 , x5_4 ,
         x6_4 , x7_4 , x2_5 , x3_5 , x4_5 , x8_5 , x9_5 ,
         x2_6 , x3_6 , x4_6 , x8_6 , x9_6 , x2_7 , x3_7 ,
         x4_7 , x8_7 , x9_7 , x5_8 , x6_8 , x7_8 , x5_9 ,
         x6_9 , x7_9 ,  obj ;

Equation Def_obj ;

Def_obj.. obj =e= 0.25*(x3_2-x2_2) * (x3_2-x2_2) + 0.25*(x2_3-x2_2)
                 * (x2_3- x2_2) + 0.25*(x1_2-x2_2) * (x1_2-x2_2) +
                 0.25*(x2_1-x2_2) * (x2_1- x2_2) -
                 0.012345679012345678*x2_2 + 0.25*(x3_3-x2_3) * (x3_3-x2_3)
                 + 0.25*(x2_4-x2_3) * (x2_4-x2_3) + 0.25*(x1_3-x2_3) *
                 (x1_3-x2_3) + 0.25*(x2_2- x2_3) * (x2_2-x2_3) -
                 0.012345679012345678*x2_3 + 0.25*(x3_4-x2_4) * (x3_4-x2_4)
                 + 0.25*(x2_5-x2_4) * (x2_5-x2_4) + 0.25*(x1_4-x2_4) *
                 (x1_4-x2_4) + 0.25*(x2_3- x2_4) * (x2_3-x2_4) -
                 0.012345679012345678*x2_4 + 0.25*(x3_5-x2_5) * (x3_5-x2_5)
                 + 0.25*(x2_6-x2_5) * (x2_6-x2_5) + 0.25*(x1_5-x2_5) *
                 (x1_5-x2_5) + 0.25*(x2_4- x2_5) * (x2_4-x2_5) -
                 0.012345679012345678*x2_5 + 0.25*(x3_6-x2_6) * (x3_6-x2_6)
                 + 0.25*(x2_7-x2_6) * (x2_7-x2_6) + 0.25*(x1_6-x2_6) *
                 (x1_6-x2_6) + 0.25*(x2_5- x2_6) * (x2_5-x2_6) -
                 0.012345679012345678*x2_6 + 0.25*(x3_7-x2_7) * (x3_7-x2_7)
                 + 0.25*(x2_8-x2_7) * (x2_8-x2_7) + 0.25*(x1_7-x2_7) *
                 (x1_7-x2_7) + 0.25*(x2_6- x2_7) * (x2_6-x2_7) -
                 0.012345679012345678*x2_7 + 0.25*(x3_8-x2_8) * (x3_8-x2_8)
                 + 0.25*(x2_9-x2_8) * (x2_9-x2_8) + 0.25*(x1_8-x2_8) *
                 (x1_8-x2_8) + 0.25*(x2_7- x2_8) * (x2_7-x2_8) -
                 0.012345679012345678*x2_8 + 0.25*(x3_9-x2_9) * (x3_9-x2_9)
                 + 0.25*(x2_10-x2_9) * (x2_10-x2_9) + 0.25*(x1_9-x2_9) *
                 (x1_9-x2_9) + 0.25*(x2_8- x2_9) * (x2_8-x2_9) -
                 0.012345679012345678*x2_9 + 0.25*(x4_2-x3_2) * (x4_2-x3_2)
                 + 0.25*(x3_3-x3_2) * (x3_3-x3_2) + 0.25*(x2_2-x3_2) *
                 (x2_2- x3_2) + 0.25*(x3_1-x3_2) * (x3_1-x3_2) -
                 0.012345679012345678*x3_2 + 0.25*(x4_3-x3_3) * (x4_3-x3_3)
                 + 0.25*(x3_4-x3_3) * (x3_4-x3_3) + 0.25*(x2_3- x3_3) *
                 (x2_3-x3_3) + 0.25*(x3_2-x3_3) * (x3_2-x3_3) -
                 0.012345679012345678*x3_3 + 0.25*(x4_4-x3_4) * (x4_4-x3_4)
                 + 0.25*(x3_5-x3_4) * (x3_5-x3_4) + 0.25*(x2_4- x3_4) *
                 (x2_4-x3_4) + 0.25*(x3_3-x3_4) * (x3_3-x3_4) -
                 0.012345679012345678*x3_4 + 0.25*(x4_5-x3_5) * (x4_5-x3_5)
                 + 0.25*(x3_6-x3_5) * (x3_6-x3_5) + 0.25*(x2_5- x3_5) *
                 (x2_5-x3_5) + 0.25*(x3_4-x3_5) * (x3_4-x3_5) -
                 0.012345679012345678*x3_5 + 0.25*(x4_6-x3_6) * (x4_6-x3_6)
                 + 0.25*(x3_7-x3_6) * (x3_7-x3_6) + 0.25*(x2_6- x3_6) *
                 (x2_6-x3_6) + 0.25*(x3_5-x3_6) * (x3_5-x3_6) -
                 0.012345679012345678*x3_6 + 0.25*(x4_7-x3_7) * (x4_7-x3_7)
                 + 0.25*(x3_8-x3_7) * (x3_8-x3_7) + 0.25*(x2_7- x3_7) *
                 (x2_7-x3_7) + 0.25*(x3_6-x3_7) * (x3_6-x3_7) -
                 0.012345679012345678*x3_7 + 0.25*(x4_8-x3_8) * (x4_8-x3_8)
                 + 0.25*(x3_9-x3_8) * (x3_9-x3_8) + 0.25*(x2_8- x3_8) *
                 (x2_8-x3_8) + 0.25*(x3_7-x3_8) * (x3_7-x3_8) -
                 0.012345679012345678*x3_8 + 0.25*(x4_9-x3_9) * (x4_9-x3_9)
                 + 0.25*(x3_10-x3_9) * (x3_10-x3_9) + 0.25*(x2_9- x3_9) *
                 (x2_9-x3_9) + 0.25*(x3_8-x3_9) * (x3_8-x3_9) -
                 0.012345679012345678*x3_9 + 0.25*(x5_2-x4_2) * (x5_2-x4_2)
                 + 0.25*(x4_3-x4_2) * (x4_3-x4_2) + 0.25*(x3_2- x4_2) *
                 (x3_2-x4_2) + 0.25*(x4_1-x4_2) * (x4_1-x4_2) -
                 0.012345679012345678*x4_2 + 0.25*(x5_3-x4_3) * (x5_3-x4_3)
                 + 0.25*(x4_4-x4_3) * (x4_4-x4_3) + 0.25*(x3_3- x4_3) *
                 (x3_3-x4_3) + 0.25*(x4_2-x4_3) * (x4_2-x4_3) -
                 0.012345679012345678*x4_3 + 0.25*(x5_4-x4_4) * (x5_4-x4_4)
                 + 0.25*(x4_5-x4_4) * (x4_5-x4_4) + 0.25*(x3_4- x4_4) *
                 (x3_4-x4_4) + 0.25*(x4_3-x4_4) * (x4_3-x4_4) -
                 0.012345679012345678*x4_4 + 0.25*(x5_5-x4_5) * (x5_5-x4_5)
                 + 0.25*(x4_6-x4_5) * (x4_6-x4_5) + 0.25*(x3_5- x4_5) *
                 (x3_5-x4_5) + 0.25*(x4_4-x4_5) * (x4_4-x4_5) -
                 0.012345679012345678*x4_5 + 0.25*(x5_6-x4_6) * (x5_6-x4_6)
                 + 0.25*(x4_7-x4_6) * (x4_7-x4_6) + 0.25*(x3_6- x4_6) *
                 (x3_6-x4_6) + 0.25*(x4_5-x4_6) * (x4_5-x4_6) -
                 0.012345679012345678*x4_6 + 0.25*(x5_7-x4_7) * (x5_7-x4_7)
                 + 0.25*(x4_8-x4_7) * (x4_8-x4_7) + 0.25*(x3_7- x4_7) *
                 (x3_7-x4_7) + 0.25*(x4_6-x4_7) * (x4_6-x4_7) -
                 0.012345679012345678*x4_7 + 0.25*(x5_8-x4_8) * (x5_8-x4_8)
                 + 0.25*(x4_9-x4_8) * (x4_9-x4_8) + 0.25*(x3_8- x4_8) *
                 (x3_8-x4_8) + 0.25*(x4_7-x4_8) * (x4_7-x4_8) -
                 0.012345679012345678*x4_8 + 0.25*(x5_9-x4_9) * (x5_9-x4_9)
                 + 0.25*(x4_10-x4_9) * (x4_10-x4_9) + 0.25*(x3_9- x4_9) *
                 (x3_9-x4_9) + 0.25*(x4_8-x4_9) * (x4_8-x4_9) -
                 0.012345679012345678*x4_9 + 0.25*(x6_2-x5_2) * (x6_2-x5_2)
                 + 0.25*(x5_3-x5_2) * (x5_3- x5_2) + 0.25*(x4_2-x5_2) *
                 (x4_2-x5_2) + 0.25*(x5_1-x5_2) * (x5_1- x5_2) -
                 0.012345679012345678*x5_2 + 0.25*(x6_3-x5_3) * (x6_3-x5_3)
                 + 0.25*(x5_4-x5_3) * (x5_4-x5_3) + 0.25*(x4_3-x5_3) *
                 (x4_3-x5_3) + 0.25*(x5_2- x5_3) * (x5_2-x5_3) -
                 0.012345679012345678*x5_3 + 0.25*(x6_4-x5_4) * (x6_4-x5_4)
                 + 0.25*(x5_5-x5_4) * (x5_5-x5_4) + 0.25*(x4_4-x5_4) *
                 (x4_4-x5_4) + 0.25*(x5_3- x5_4) * (x5_3-x5_4) -
                 0.012345679012345678*x5_4 + 0.25*(x6_5-x5_5) * (x6_5-x5_5)
                 + 0.25*(x5_6-x5_5) * (x5_6-x5_5) + 0.25*(x4_5-x5_5) *
                 (x4_5-x5_5) + 0.25*(x5_4- x5_5) * (x5_4-x5_5) -
                 0.012345679012345678*x5_5 + 0.25*(x6_6-x5_6) * (x6_6-x5_6)
                 + 0.25*(x5_7-x5_6) * (x5_7-x5_6) + 0.25*(x4_6-x5_6) *
                 (x4_6-x5_6) + 0.25*(x5_5- x5_6) * (x5_5-x5_6) -
                 0.012345679012345678*x5_6 + 0.25*(x6_7-x5_7) * (x6_7-x5_7)
                 + 0.25*(x5_8-x5_7) * (x5_8-x5_7) + 0.25*(x4_7-x5_7) *
                 (x4_7-x5_7) + 0.25*(x5_6- x5_7) * (x5_6-x5_7) -
                 0.012345679012345678*x5_7 + 0.25*(x6_8-x5_8) * (x6_8-x5_8)
                 + 0.25*(x5_9-x5_8) * (x5_9-x5_8) + 0.25*(x4_8-x5_8) *
                 (x4_8-x5_8) + 0.25*(x5_7- x5_8) * (x5_7-x5_8) -
                 0.012345679012345678*x5_8 + 0.25*(x6_9-x5_9) * (x6_9-x5_9)
                 + 0.25*(x5_10-x5_9) * (x5_10-x5_9) + 0.25*(x4_9-x5_9) *
                 (x4_9-x5_9) + 0.25*(x5_8- x5_9) * (x5_8-x5_9) -
                 0.012345679012345678*x5_9 + 0.25*(x7_2-x6_2) * (x7_2-x6_2)
                 + 0.25*(x6_3-x6_2) * (x6_3-x6_2) + 0.25*(x5_2-x6_2) *
                 (x5_2- x6_2) + 0.25*(x6_1-x6_2) * (x6_1-x6_2) -
                 0.012345679012345678*x6_2 + 0.25*(x7_3-x6_3) * (x7_3-x6_3)
                 + 0.25*(x6_4-x6_3) * (x6_4-x6_3) + 0.25*(x5_3- x6_3) *
                 (x5_3-x6_3) + 0.25*(x6_2-x6_3) * (x6_2-x6_3) -
                 0.012345679012345678*x6_3 + 0.25*(x7_4-x6_4) * (x7_4-x6_4)
                 + 0.25*(x6_5-x6_4) * (x6_5-x6_4) + 0.25*(x5_4- x6_4) *
                 (x5_4-x6_4) + 0.25*(x6_3-x6_4) * (x6_3-x6_4) -
                 0.012345679012345678*x6_4 + 0.25*(x7_5-x6_5) * (x7_5-x6_5)
                 + 0.25*(x6_6-x6_5) * (x6_6-x6_5) + 0.25*(x5_5- x6_5) *
                 (x5_5-x6_5) + 0.25*(x6_4-x6_5) * (x6_4-x6_5) -
                 0.012345679012345678*x6_5 + 0.25*(x7_6-x6_6) * (x7_6-x6_6)
                 + 0.25*(x6_7-x6_6) * (x6_7-x6_6) + 0.25*(x5_6- x6_6) *
                 (x5_6-x6_6) + 0.25*(x6_5-x6_6) * (x6_5-x6_6) -
                 0.012345679012345678*x6_6 + 0.25*(x7_7-x6_7) * (x7_7-x6_7)
                 + 0.25*(x6_8-x6_7) * (x6_8-x6_7) + 0.25*(x5_7- x6_7) *
                 (x5_7-x6_7) + 0.25*(x6_6-x6_7) * (x6_6-x6_7) -
                 0.012345679012345678*x6_7 + 0.25*(x7_8-x6_8) * (x7_8-x6_8)
                 + 0.25*(x6_9-x6_8) * (x6_9-x6_8) + 0.25*(x5_8- x6_8) *
                 (x5_8-x6_8) + 0.25*(x6_7-x6_8) * (x6_7-x6_8) -
                 0.012345679012345678*x6_8 + 0.25*(x7_9-x6_9) * (x7_9-x6_9)
                 + 0.25*(x6_10-x6_9) * (x6_10-x6_9) + 0.25*(x5_9- x6_9) *
                 (x5_9-x6_9) + 0.25*(x6_8-x6_9) * (x6_8-x6_9) -
                 0.012345679012345678*x6_9 + 0.25*(x8_2-x7_2) * (x8_2-x7_2)
                 + 0.25*(x7_3-x7_2) * (x7_3-x7_2) + 0.25*(x6_2- x7_2) *
                 (x6_2-x7_2) + 0.25*(x7_1-x7_2) * (x7_1-x7_2) -
                 0.012345679012345678*x7_2 + 0.25*(x8_3-x7_3) * (x8_3-x7_3)
                 + 0.25*(x7_4-x7_3) * (x7_4-x7_3) + 0.25*(x6_3- x7_3) *
                 (x6_3-x7_3) + 0.25*(x7_2-x7_3) * (x7_2-x7_3) -
                 0.012345679012345678*x7_3 + 0.25*(x8_4-x7_4) * (x8_4-x7_4)
                 + 0.25*(x7_5-x7_4) * (x7_5-x7_4) + 0.25*(x6_4- x7_4) *
                 (x6_4-x7_4) + 0.25*(x7_3-x7_4) * (x7_3-x7_4) -
                 0.012345679012345678*x7_4 + 0.25*(x8_5-x7_5) * (x8_5-x7_5)
                 + 0.25*(x7_6-x7_5) * (x7_6-x7_5) + 0.25*(x6_5- x7_5) *
                 (x6_5-x7_5) + 0.25*(x7_4-x7_5) * (x7_4-x7_5) -
                 0.012345679012345678*x7_5 + 0.25*(x8_6-x7_6) * (x8_6-x7_6)
                 + 0.25*(x7_7-x7_6) * (x7_7-x7_6) + 0.25*(x6_6- x7_6) *
                 (x6_6-x7_6) + 0.25*(x7_5-x7_6) * (x7_5-x7_6) -
                 0.012345679012345678*x7_6 + 0.25*(x8_7-x7_7) * (x8_7-x7_7)
                 + 0.25*(x7_8-x7_7) * (x7_8-x7_7) + 0.25*(x6_7- x7_7) *
                 (x6_7-x7_7) + 0.25*(x7_6-x7_7) * (x7_6-x7_7) -
                 0.012345679012345678*x7_7 + 0.25*(x8_8-x7_8) * (x8_8-x7_8)
                 + 0.25*(x7_9-x7_8) * (x7_9-x7_8) + 0.25*(x6_8- x7_8) *
                 (x6_8-x7_8) + 0.25*(x7_7-x7_8) * (x7_7-x7_8) -
                 0.012345679012345678*x7_8 + 0.25*(x8_9-x7_9) * (x8_9-x7_9)
                 + 0.25*(x7_10-x7_9) * (x7_10-x7_9) + 0.25*(x6_9- x7_9) *
                 (x6_9-x7_9) + 0.25*(x7_8-x7_9) * (x7_8-x7_9) -
                 0.012345679012345678*x7_9 + 0.25*(x9_2-x8_2) * (x9_2-x8_2)
                 + 0.25*(x8_3-x8_2) * (x8_3- x8_2) + 0.25*(x7_2-x8_2) *
                 (x7_2-x8_2) + 0.25*(x8_1-x8_2) * (x8_1- x8_2) -
                 0.012345679012345678*x8_2 + 0.25*(x9_3-x8_3) * (x9_3-x8_3)
                 + 0.25*(x8_4-x8_3) * (x8_4-x8_3) + 0.25*(x7_3-x8_3) *
                 (x7_3-x8_3) + 0.25*(x8_2- x8_3) * (x8_2-x8_3) -
                 0.012345679012345678*x8_3 + 0.25*(x9_4-x8_4) * (x9_4-x8_4)
                 + 0.25*(x8_5-x8_4) * (x8_5-x8_4) + 0.25*(x7_4-x8_4) *
                 (x7_4-x8_4) + 0.25*(x8_3- x8_4) * (x8_3-x8_4) -
                 0.012345679012345678*x8_4 + 0.25*(x9_5-x8_5) * (x9_5-x8_5)
                 + 0.25*(x8_6-x8_5) * (x8_6-x8_5) + 0.25*(x7_5-x8_5) *
                 (x7_5-x8_5) + 0.25*(x8_4- x8_5) * (x8_4-x8_5) -
                 0.012345679012345678*x8_5 + 0.25*(x9_6-x8_6) * (x9_6-x8_6)
                 + 0.25*(x8_7-x8_6) * (x8_7-x8_6) + 0.25*(x7_6-x8_6) *
                 (x7_6-x8_6) + 0.25*(x8_5- x8_6) * (x8_5-x8_6) -
                 0.012345679012345678*x8_6 + 0.25*(x9_7-x8_7) * (x9_7-x8_7)
                 + 0.25*(x8_8-x8_7) * (x8_8-x8_7) + 0.25*(x7_7-x8_7) *
                 (x7_7-x8_7) + 0.25*(x8_6- x8_7) * (x8_6-x8_7) -
                 0.012345679012345678*x8_7 + 0.25*(x9_8-x8_8) * (x9_8-x8_8)
                 + 0.25*(x8_9-x8_8) * (x8_9-x8_8) + 0.25*(x7_8-x8_8) *
                 (x7_8-x8_8) + 0.25*(x8_7- x8_8) * (x8_7-x8_8) -
                 0.012345679012345678*x8_8 + 0.25*(x9_9-x8_9) * (x9_9-x8_9)
                 + 0.25*(x8_10-x8_9) * (x8_10-x8_9) + 0.25*(x7_9-x8_9) *
                 (x7_9-x8_9) + 0.25*(x8_8- x8_9) * (x8_8-x8_9) -
                 0.012345679012345678*x8_9 + 0.25*(x10_2-x9_2) *
                 (x10_2-x9_2) + 0.25*(x9_3-x9_2) * (x9_3-x9_2) +
                 0.25*(x8_2-x9_2) * (x8_2- x9_2) + 0.25*(x9_1-x9_2)
                 *(x9_1-x9_2) -
                 0.012345679012345678*x9_2 + 0.25*(x10_3-x9_3) *
                 (x10_3-x9_3) + 0.25*(x9_4-x9_3) * (x9_4-x9_3) +
                 0.25*(x8_3- x9_3) * (x8_3-x9_3) + 0.25*(x9_2-x9_3) *
                 (x9_2-x9_3) -
                 0.012345679012345678*x9_3 + 0.25*(x10_4-x9_4) *
                 (x10_4-x9_4) + 0.25*(x9_5-x9_4) * (x9_5- x9_4) +
                 0.25*(x8_4-x9_4) * (x8_4-x9_4) + 0.25*(x9_3-x9_4) * (x9_3-
                 x9_4) -
                 0.012345679012345678*x9_4 + 0.25*(x10_5-x9_5) *
                 (x10_5-x9_5) + 0.25*(x9_6-x9_5) * (x9_6-x9_5) +
                 0.25*(x8_5-x9_5) * (x8_5-x9_5) + 0.25*(x9_4- x9_5) *
                 (x9_4-x9_5) -
                 0.012345679012345678*x9_5 + 0.25*(x10_6-x9_6) * (x10_6-
                 x9_6) + 0.25*(x9_7-x9_6) * (x9_7-x9_6) + 0.25*(x8_6-x9_6)
                 * (x8_6- x9_6) + 0.25*(x9_5-x9_6) * (x9_5-x9_6) -
                 0.012345679012345678*x9_6 + 0.25*(x10_7-x9_7) *
                 (x10_7-x9_7) + 0.25*(x9_8-x9_7) * (x9_8-x9_7) +
                 0.25*(x8_7- x9_7) * (x8_7-x9_7) + 0.25*(x9_6-x9_7) *
                 (x9_6-x9_7) -
                 0.012345679012345678*x9_7 + 0.25*(x10_8-x9_8) *
                 (x10_8-x9_8) + 0.25*(x9_9-x9_8) * (x9_9- x9_8) +
                 0.25*(x8_8-x9_8) * (x8_8-x9_8) + 0.25*(x9_7-x9_8) * (x9_7-
                 x9_8) -
                 0.012345679012345678*x9_8 + 0.25*(x10_9-x9_9) *
                 (x10_9-x9_9) + 0.25*(x9_10-x9_9) * (x9_10-x9_9) +
                 0.25*(x8_9-x9_9) * (x8_9- x9_9) + 0.25*(x9_8-x9_9) *
                 (x9_8-x9_9) -
                 0.012345679012345678*x9_9;

  x1_1.up =0.0 ;  x2_1.up =0.0 ;  x3_1.up =0.0 ;  x4_1.up =0.0 ;  x5_1.up =0.0 ;
  x6_1.up =0.0 ;  x7_1.up =0.0 ;  x8_1.up =0.0 ;  x9_1.up =0.0 ; x10_1.up =0.0 ;
  x1_2.up =0.0 ; x10_2.up =0.0 ;  x1_3.up =0.0 ; x10_3.up =0.0 ;  x1_4.up =0.0 ;
 x10_4.up =0.0 ;  x1_5.up =0.0 ; x10_5.up =0.0 ;  x1_6.up =0.0 ; x10_6.up =0.0 ;
  x1_7.up =0.0 ; x10_7.up =0.0 ;  x1_8.up =0.0 ; x10_8.up =0.0 ;  x1_9.up =0.0 ;
 x10_9.up =0.0 ; x1_10.up =0.0 ; x2_10.up =0.0 ; x3_10.up =0.0 ; x4_10.up =0.0 ;
 x5_10.up =0.0 ; x6_10.up =0.0 ; x7_10.up =0.0 ; x8_10.up =0.0 ; x9_10.up =0.0 ;
x10_10.up =0.0 ;

     x2_2.lo =  0.3937793366356831   ;   x2_2.up = 0.5572403400857789  ;
     x3_2.lo =  0.44671816460760055  ;   x3_2.up = 0.6043715642572578  ;
     x4_2.lo =  2.658723886528665e-4 ;   x4_2.up = 0.02413474589705515 ;
     x5_2.lo = -0.3391611563540678   ;   x5_2.up = 0.5063371045723885  ;
     x6_2.lo = -0.4960928025216343   ;   x6_2.up = 0.6466743955359259  ;
     x7_2.lo = -0.0021091266848867365;   x7_2.up = 0.036446308947150105;
     x8_2.lo =  0.2847312063379939   ;   x8_2.up = 0.4528027837130198  ;
     x9_2.lo =  0.5400916195594984   ;   x9_2.up = 0.6832006741551072  ;
     x2_3.lo =  0.4227141086543548   ;   x2_3.up = 0.5832456273206106  ;
     x3_3.lo =  0.4795428637397414   ;   x3_3.up = 0.632658253186744   ;
     x4_3.lo =  2.854086015416797e-4 ;   x4_3.up = 0.024334889569585016;
     x5_3.lo = -0.36408260302147705  ;   x5_3.up = 0.5298784047199946  ;
     x6_3.lo = -0.5325455332913744   ;   x6_3.up = 0.6770087662870579  ;
     x7_3.lo = -0.0022641045979156157;   x7_3.up = 0.0372423976921895  ;
     x8_3.lo =  0.30565315875017296  ;   x8_3.up = 0.47375273826165754 ;
     x9_3.lo =  0.5797773684732547   ;   x9_3.up = 0.7153031108838603  ;
     x2_4.lo =  4.466137010418048e-5 ;   x2_4.up = 0.021258794088429997;
     x3_4.lo =  5.0665546476499324e-5;   x3_4.up = 0.021369226053308238;
     x4_4.lo =  3.0154515601447075e-8;   x4_4.up = 0.020009688017269035;
     x5_4.lo = -3.846672620840164e-5 ;   x5_4.up = 0.021139524020333502;
     x6_4.lo = -5.626548220821779e-5 ;   x6_4.up = 0.021468344734397852;
     x7_4.lo = -2.3921135190869225e-7;   x7_4.up = 0.020038534925496957;
     x8_4.lo =  3.229343087201135e-5 ;   x8_4.up = 0.021014089123514084;
     x9_4.lo =  6.125570711098406e-5 ;   x9_4.up = 0.021553928522820797;
     x2_5.lo = -0.3642526902031173   ;   x2_5.up = 0.5300371910853469  ;
     x3_5.lo = -0.41322202076708053  ;   x3_5.up = 0.5747819270912036  ;
     x4_5.lo = -2.4593655331166914e-4;   x4_5.up = 0.023925383158772025;
     x5_5.lo =  0.3137299297364258   ;   x5_5.up = 0.4817114394222081  ;
     x6_5.lo =  0.4588944139445591   ;   x6_5.up = 0.6149427557379955  ;
     x7_5.lo =  0.0019509786255238442;   x7_5.up = 0.035613550571773775;
     x8_5.lo = -0.2633812855176486   ;   x8_5.up = 0.4308878273430881  ;
     x9_5.lo = -0.49959407992684074  ;   x9_5.up = 0.6496195273012655  ;
     x2_6.lo = -0.4507393756992777   ;   x2_6.up = 0.6078732052695588  ;
     x3_6.lo = -0.5113357860497522   ;   x3_6.up = 0.6594463686279571  ;
     x4_6.lo = -3.043307338087716e-4 ;   x4_6.up = 0.024524430021559566;
     x5_6.lo =  0.3882206953330132   ;   x5_6.up = 0.5521725328013108  ;
     x6_6.lo =  0.5678524475355717   ;   x6_6.up = 0.705736081369553   ;
     x7_6.lo =  0.002414211099390602 ;   x7_6.up = 0.03799631121160941 ;
     x8_6.lo = -0.3259174726723327   ;   x8_6.up = 0.49359280516860704 ;
     x9_6.lo = -0.618215677593785    ;   x9_6.up = 0.7457048232644721  ;
     x2_7.lo = -3.5636475335626487e-4;   x2_7.up = 0.02502647077806891 ;
     x3_7.lo = -4.0427364703860696e-4;   x3_7.up = 0.025467434911541704;
     x4_7.lo = -2.4061076697424153e-7;   x4_7.up = 0.02003868506862863 ;
     x5_7.lo =  3.0693606948696984e-4;   x5_7.up = 0.024550215354329948;
     x6_7.lo =  4.489569989194305e-4 ;   x6_7.up = 0.025863224150335377;
     x7_7.lo =  1.9087299432173126e-6;   x7_7.up = 0.02015387320192066 ;
     x8_7.lo = -2.576777313568063e-4 ;   x8_7.up = 0.02404934325045849 ;
     x9_7.lo = -4.887753086246255e-4 ;   x9_7.up = 0.026204967423153654;
     x2_8.lo =  0.3344514359720908   ;   x2_8.up = 0.5018243120191268  ;
     x3_8.lo =  0.37941435145962443  ;   x3_8.up = 0.544093977877458   ;
     x4_8.lo =  2.2581530795900886e-4;   x4_8.up = 0.023708249266807507;
     x5_8.lo = -0.28806218410977386  ;   x5_8.up = 0.4561717155911093  ;
     x6_8.lo = -0.4213500677723075   ;   x6_8.up = 0.5820332967566972  ;
     x7_8.lo = -0.001791359735719315 ;   x7_8.up = 0.03474988176139078 ;
     x8_8.lo =  0.24183280321260603  ;   x8_8.up = 0.4081594287375977  ;
     x9_8.lo =  0.45871989947833597  ;   x9_8.up = 0.6147919110176742  ;
     x2_9.lo =  0.4775418533990749   ;   x2_9.up = 0.6309527543824225  ;
     x3_9.lo =  0.5417415299043793   ;   x3_9.up = 0.684550649172644   ;
     x4_9.lo =  3.224272617493759e-4 ;   x4_9.up = 0.024702056427992596;
     x5_9.lo = -0.41130560224428553  ;   x5_9.up = 0.573065306952623   ;
     x6_9.lo = -0.6016188619701556   ;   x6_9.up = 0.732657668246734   ;
     x7_9.lo = -0.0025577682027690973;   x7_9.up = 0.038702835585803785;
     x8_9.lo =  0.3452976206341617   ;   x8_9.up = 0.5121857743810341  ;
     x9_9.lo =  0.6549768589009787   ;   x9_9.up = 0.7741955589534621  ;

     x2_2.l = 0.5572403400857789  ;
     x3_2.l = 0.6043715642572578  ;
     x4_2.l = 0.02413474589705515 ;
     x5_2.l = 0.5063371045723885  ;
     x6_2.l = 0.6466743955359259  ;
     x7_2.l = 0.036446308947150105;
     x8_2.l = 0.4528027837130198  ;
     x9_2.l = 0.6832006741551072  ;
     x2_3.l = 0.5832456273206106  ;
     x3_3.l = 0.632658253186744   ;
     x4_3.l = 0.024334889569585016;
     x5_3.l = 0.5298784047199946  ;
     x6_3.l = 0.6770087662870579  ;
     x7_3.l = 0.0372423976921895  ;
     x8_3.l = 0.47375273826165754 ;
     x9_3.l = 0.7153031108838603  ;
     x2_4.l = 0.021258794088429997;
     x3_4.l = 0.021369226053308238;
     x4_4.l = 0.020009688017269035;
     x5_4.l = 0.021139524020333502;
     x6_4.l = 0.021468344734397852;
     x7_4.l = 0.020038534925496957;
     x8_4.l = 0.021014089123514084;
     x9_4.l = 0.021553928522820797;
     x2_5.l = 0.5300371910853469  ;
     x3_5.l = 0.5747819270912036  ;
     x4_5.l = 0.023925383158772025;
     x5_5.l = 0.4817114394222081  ;
     x6_5.l = 0.6149427557379955  ;
     x7_5.l = 0.035613550571773775;
     x8_5.l = 0.4308878273430881  ;
     x9_5.l = 0.6496195273012655  ;
     x2_6.l = 0.6078732052695588  ;
     x3_6.l = 0.6594463686279571  ;
     x4_6.l = 0.024524430021559566;
     x5_6.l = 0.5521725328013108  ;
     x6_6.l = 0.705736081369553   ;
     x7_6.l = 0.03799631121160941 ;
     x8_6.l = 0.49359280516860704 ;
     x9_6.l = 0.7457048232644721  ;
     x2_7.l = 0.02502647077806891 ;
     x3_7.l = 0.025467434911541704;
     x4_7.l = 0.02003868506862863 ;
     x5_7.l = 0.024550215354329948;
     x6_7.l = 0.025863224150335377;
     x7_7.l = 0.02015387320192066 ;
     x8_7.l = 0.02404934325045849 ;
     x9_7.l = 0.026204967423153654;
     x2_8.l = 0.5018243120191268  ;
     x3_8.l = 0.544093977877458   ;
     x4_8.l = 0.023708249266807507;
     x5_8.l = 0.4561717155911093  ;
     x6_8.l = 0.5820332967566972  ;
     x7_8.l = 0.03474988176139078 ;
     x8_8.l = 0.4081594287375977  ;
     x9_8.l = 0.6147919110176742  ;
     x2_9.l = 0.6309527543824225  ;
     x3_9.l = 0.684550649172644   ;
     x4_9.l = 0.024702056427992596;
     x5_9.l = 0.573065306952623   ;
     x6_9.l = 0.732657668246734   ;
     x7_9.l = 0.038702835585803785;
     x8_9.l = 0.5121857743810341  ;
     x9_9.l = 0.7741955589534621  ;

Model obstclbu /all/ ;

Solve obstclbu using nlp minimazing obj ;

     display  x1_1.l ;  display x2_1.l ; display  x3_1.l ; display   x4_1.l ;
     display  x5_1.l ;  display x6_1.l ; display  x7_1.l ; display   x8_1.l ;
     display  x9_1.l ; display x10_1.l ; display  x1_2.l ; display   x2_2.l ;
     display  x3_2.l ;  display x4_2.l ; display  x5_2.l ; display   x6_2.l ;
     display  x7_2.l ;  display x8_2.l ; display  x9_2.l ; display  x10_2.l ;
     display  x1_3.l ;  display x2_3.l ; display  x3_3.l ; display   x4_3.l ;
     display  x5_3.l ;  display x6_3.l ; display  x7_3.l ; display   x8_3.l ;
     display  x9_3.l ; display x10_3.l ; display  x1_4.l ; display   x2_4.l ;
     display  x3_4.l ;  display x4_4.l ; display  x5_4.l ; display   x6_4.l ;
     display  x7_4.l ;  display x8_4.l ; display  x9_4.l ; display  x10_4.l ;
     display  x1_5.l ;  display x2_5.l ; display  x3_5.l ; display   x4_5.l ;
     display  x5_5.l ;  display x6_5.l ; display  x7_5.l ; display   x8_5.l ;
     display  x9_5.l ; display x10_5.l ; display  x1_6.l ; display   x2_6.l ;
     display  x3_6.l ;  display x4_6.l ; display  x5_6.l ; display   x6_6.l ;
     display  x7_6.l ;  display x8_6.l ; display  x9_6.l ; display  x10_6.l ;
     display  x1_7.l ;  display x2_7.l ; display  x3_7.l ; display   x4_7.l ;
     display  x5_7.l ;  display x6_7.l ; display  x7_7.l ; display   x8_7.l ;
     display  x9_7.l ; display x10_7.l ; display  x1_8.l ; display   x2_8.l ;
     display  x3_8.l ;  display x4_8.l ; display  x5_8.l ; display   x6_8.l ;
     display  x7_8.l ;  display x8_8.l ; display  x9_8.l ; display  x10_8.l ;
     display  x1_9.l ;  display x2_9.l ; display  x3_9.l ; display   x4_9.l ;
     display  x5_9.l ;  display x6_9.l ; display  x7_9.l ; display   x8_9.l ;
     display  x9_9.l ; display x10_9.l ; display x1_10.l ; display  x2_10.l ;
     display x3_10.l ; display x4_10.l ; display x5_10.l ; display  x6_10.l ;
     display x7_10.l ; display x8_10.l ; display x9_10.l ; display x10_10.l ;
     display   obj.l ;

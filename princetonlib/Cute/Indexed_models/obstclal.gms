*
***************************
* SET UP THE INITIAL DATA *
***************************
*   Problem :
*   *********
*   A quadratic obstacle problem by Dembo and Tulowitzki
*   The problem comes from the obstacle problem on a rectangle.
*   The rectangle is discretized into (px-1)(py-1) little rectangles. The
*   heights of the considered surface above the corners of these little
*   rectangles are the problem variables,  There are px*py of them.
*   Source:
*   R. Dembo and U. Tulowitzki,
*   "On the minimization of quadratic functions subject to box
*   constraints",
*   WP 71, Yale University (new Haven, USA), 1983.
*   See also More 1989 (Problem A, Starting point L
*   SIF input: Ph. Toint, Dec 1989.
*   classification QBR2-AY-V-0
*   PX is the number of points along the X side of the rectangle
*   PY is the number of points along the Y side of the rectangle
*IE PX                  4              $ n = 16
*IE PY                  4
*IE PX                  23             $ n = 529
*IE PY                  23
*IE PX                  32             $ n = 1024
*IE PY                  32
*IE PX                  75             $ n = 5625
*IE PY                  75
*IE PX                  100            $ n = 10000
*IE PY                  100
*IE PX                  125            $ n = 15625
*IE PY                  125
*   The force constant
*   Define a few helpful parameters
*   Define one variable per discretized point in the unit square
*   Define a group per interior node
*   Describe the upper obstacle (problem A)
*   Fix the variables on the lower and upper edges of the unit square
*   Fix the variables on the left and right edges of the unit square
*   Describe the lower obstacle  (problem A)
*   Start from the boundary values on the lower and upper edges
*   Start from the boundary values on the left and right edges
*   Describe the lower obstacle (starting point L)
*   Each node has four elements
*   All groups are TRIVIAL
*   Solution
*LO SOLTN(4)            0.753659754
*LO SOLTN(10)           1.397897560
*LO SOLTN(23)           1.678027027
*LO SOLTN(32)           1.748270031
*LO SOLTN(75)           ???
*LO SOLTN(100)          ???
$offdigit;
 Parameter     px ;      px = 10;
 Parameter     py ;      py = 10;
 Parameter      c ;       c = 1.0;
 Parameter   pxm1 ;    pxm1 = -1 + (10);
 Parameter  rpxm1 ;   rpxm1 = 9.0;
 Parameter     hx ;      hx = 1.0 / (9.0);
 Parameter   pym1 ;    pym1 = -1 + (10);
 Parameter  rpym1 ;   rpym1 = 9.0;
 Parameter     hy ;      hy = 1.0 / (9.0);
 Parameter   hxhy ;    hxhy = (1.0 / (9.0)) * (1.0 / (9.0));
 Parameter  hxdhy ;   hxdhy = (1.0 / (9.0)) * (1.0 / (1.0 / (9.0)));
 Parameter  hydhx ;   hydhx = (1.0 / (9.0)) * (1.0 / (1.0 / (9.0)));
 Parameter hyd4hx ;  hyd4hx = 0.25 * ((1.0 / (9.0)) * (1.0 / (1.0 /(9.0))));
 Parameter hxd4hy ;  hxd4hy = 0.25 * ((1.0 / (9.0)) * (1.0 / (1.0 /(9.0))));
 Parameter     c0 ;      c0 = ((1.0 / (9.0)) * (1.0 / (9.0))) * (1.0);
 Parameter     lc ;      lc = -1.0 * (((1.0 / (9.0)) * (1.0 / (9.0))) * (1.0));
 Parameter    im1 ;     im1 = -1 + (9);
 Parameter   rim1 ;    rim1 = 8.0;
 Parameter   xsi1 ;    xsi1 = (8.0) * (1.0 / (9.0));
 Parameter  sxsi1 ;   sxsi1 = sin(3.2 * ((8.0) * (1.0 / (9.0))));
 Parameter    jm1 ;     jm1 = -1 + (9);
 Parameter   rjm1 ;    rjm1 = 8.0;
 Parameter   xsi2 ;    xsi2 = (8.0) * (1.0 / (9.0));
 Parameter  sxsi2 ;   sxsi2 = sin(3.3 * ((8.0) * (1.0 / (9.0))));
 Parameter    low ;     low = (sin(3.2*(8*(1/9))))*(sin(3.3*(8*(1/9))));
 Parameter    ip1 ;     ip1 = 1 + (9);
 Parameter    jp1 ;     jp1 = 1 + (9);

Positive Variable
        x1_1 , x2_1 , x3_1 , x4_1 , x5_1 , x6_1 , x7_1 , x8_1 , x9_1 , x10_1  ,
        x1_2 , x2_2 , x3_2 , x4_2 , x5_2 , x6_2 , x7_2 , x8_2 , x9_2 , x10_2  ,
        x1_3 , x2_3 , x3_3 , x4_3 , x5_3 , x6_3 , x7_3 , x8_3 , x9_3 , x10_3  ,
        x1_4 , x2_4 , x3_4 , x4_4 , x5_4 , x6_4 , x7_4 , x8_4 , x9_4 , x10_4  ,
        x1_5 , x2_5 , x3_5 , x4_5 , x5_5 , x6_5 , x7_5 , x8_5 , x9_5 , x10_5  ,
        x1_6 , x2_6 , x3_6 , x4_6 , x5_6 , x6_6 , x7_6 , x8_6 , x9_6 , x10_6  ,
        x1_7 , x2_7 , x3_7 , x4_7 , x5_7 , x6_7 , x7_7 , x8_7 , x9_7 , x10_7  ,
        x1_8 , x2_8 , x3_8 , x4_8 , x5_8 , x6_8 , x7_8 , x8_8 , x9_8 , x10_8  ,
        x1_9 , x2_9 , x3_9 , x4_9 , x5_9 , x6_9 , x7_9 , x8_9 , x9_9 , x10_9  ,
       x1_10 , x2_10,x3_10 , x4_10, x5_10, x6_10, x7_10, x8_10, x9_10, x10_10 ;
Variable obj ;

Equation Def_obj ;

Def_obj..
   obj =e= 0.25*(x3_2-x2_2) * (x3_2-x2_2) + 0.25*(x2_3-x2_2) * (x2_3-x2_2)
           + 0.25*(x1_2-x2_2) * (x1_2-x2_2) + 0.25*(x2_1-x2_2) *
           (x2_1-x2_2) - 0.012345679012345678*x2_2 + 0.25*(x3_3-x2_3) *
           (x3_3-x2_3) + 0.25*(x2_4-x2_3) * (x2_4-x2_3) + 0.25*(x1_3-x2_3)
           * (x1_3-x2_3) + 0.25*(x2_2- x2_3) * (x2_2-x2_3) -
           0.012345679012345678*x2_3 + 0.25*(x3_4-x2_4) * (x3_4-x2_4) +
           0.25*(x2_5-x2_4) * (x2_5-x2_4) + 0.25*(x1_4-x2_4) * (x1_4-x2_4)
           + 0.25*(x2_3- x2_4) * (x2_3-x2_4) - 0.012345679012345678*x2_4 +
           0.25*(x3_5-x2_5) * (x3_5-x2_5) + 0.25*(x2_6-x2_5) * (x2_6-x2_5)
           + 0.25*(x1_5-x2_5) * (x1_5-x2_5) + 0.25*(x2_4- x2_5) *
           (x2_4-x2_5) - 0.012345679012345678*x2_5 + 0.25*(x3_6-x2_6) *
           (x3_6-x2_6) + 0.25*(x2_7-x2_6) * (x2_7-x2_6) + 0.25*(x1_6-x2_6)
           * (x1_6-x2_6) + 0.25*(x2_5- x2_6) * (x2_5-x2_6) -
           0.012345679012345678*x2_6 + 0.25*(x3_7-x2_7) * (x3_7-x2_7) +
           0.25*(x2_8-x2_7) * (x2_8-x2_7) + 0.25*(x1_7-x2_7) * (x1_7-x2_7)
           + 0.25*(x2_6- x2_7) * (x2_6-x2_7) - 0.012345679012345678*x2_7 +
           0.25*(x3_8-x2_8) * (x3_8-x2_8) + 0.25*(x2_9-x2_8) * (x2_9-x2_8)
           + 0.25*(x1_8-x2_8) * (x1_8-x2_8) + 0.25*(x2_7- x2_8) *
           (x2_7-x2_8) - 0.012345679012345678*x2_8 + 0.25*(x3_9-x2_9) *
           (x3_9-x2_9) + 0.25*(x2_10-x2_9) * (x2_10-x2_9) +
           0.25*(x1_9-x2_9) * (x1_9-x2_9) + 0.25*(x2_8- x2_9) * (x2_8-x2_9)
           - 0.012345679012345678*x2_9 + 0.25*(x4_2-x3_2) * (x4_2-x3_2) +
           0.25*(x3_3-x3_2) * (x3_3-x3_2) + 0.25*(x2_2-x3_2) * (x2_2- x3_2)
           + 0.25*(x3_1-x3_2) * (x3_1-x3_2) - 0.012345679012345678*x3_2 +
           0.25*(x4_3-x3_3) * (x4_3-x3_3) + 0.25*(x3_4-x3_3) * (x3_4-x3_3)
           + 0.25*(x2_3- x3_3) * (x2_3-x3_3) + 0.25*(x3_2-x3_3) *
           (x3_2-x3_3) - 0.012345679012345678*x3_3 + 0.25*(x4_4-x3_4) *
           (x4_4-x3_4) + 0.25*(x3_5-x3_4) * (x3_5-x3_4) + 0.25*(x2_4- x3_4)
           * (x2_4-x3_4) + 0.25*(x3_3-x3_4) * (x3_3-x3_4) -
           0.012345679012345678*x3_4 + 0.25*(x4_5-x3_5) * (x4_5-x3_5) +
           0.25*(x3_6-x3_5) * (x3_6-x3_5) + 0.25*(x2_5- x3_5) * (x2_5-x3_5)
           + 0.25*(x3_4-x3_5) * (x3_4-x3_5) - 0.012345679012345678*x3_5 +
           0.25*(x4_6-x3_6) * (x4_6-x3_6) + 0.25*(x3_7-x3_6) * (x3_7-x3_6)
           + 0.25*(x2_6- x3_6) * (x2_6-x3_6) + 0.25*(x3_5-x3_6) *
           (x3_5-x3_6) - 0.012345679012345678*x3_6 + 0.25*(x4_7-x3_7) *
           (x4_7-x3_7) + 0.25*(x3_8-x3_7) * (x3_8-x3_7) + 0.25*(x2_7- x3_7)
           * (x2_7-x3_7) + 0.25*(x3_6-x3_7) * (x3_6-x3_7) -
           0.012345679012345678*x3_7 + 0.25*(x4_8-x3_8) * (x4_8-x3_8) +
           0.25*(x3_9-x3_8) * (x3_9-x3_8) + 0.25*(x2_8- x3_8) * (x2_8-x3_8)
           + 0.25*(x3_7-x3_8) * (x3_7-x3_8) - 0.012345679012345678*x3_8 +
           0.25*(x4_9-x3_9) * (x4_9-x3_9) + 0.25*(x3_10-x3_9) *
           (x3_10-x3_9) + 0.25*(x2_9- x3_9) * (x2_9-x3_9) +
           0.25*(x3_8-x3_9) * (x3_8-x3_9) - 0.012345679012345678*x3_9 +
           0.25*(x5_2-x4_2) * (x5_2-x4_2) + 0.25*(x4_3-x4_2) * (x4_3-x4_2)
           + 0.25*(x3_2- x4_2) * (x3_2-x4_2) + 0.25*(x4_1-x4_2) *
           (x4_1-x4_2) - 0.012345679012345678*x4_2 + 0.25*(x5_3-x4_3) *
           (x5_3-x4_3) + 0.25*(x4_4-x4_3) * (x4_4-x4_3) + 0.25*(x3_3- x4_3)
           * (x3_3-x4_3) + 0.25*(x4_2-x4_3) * (x4_2-x4_3) -
           0.012345679012345678*x4_3 + 0.25*(x5_4-x4_4) * (x5_4-x4_4) +
           0.25*(x4_5-x4_4) * (x4_5-x4_4) + 0.25*(x3_4- x4_4) * (x3_4-x4_4)
           + 0.25*(x4_3-x4_4) * (x4_3-x4_4) - 0.012345679012345678*x4_4 +
           0.25*(x5_5-x4_5) * (x5_5-x4_5) + 0.25*(x4_6-x4_5) * (x4_6-x4_5)
           + 0.25*(x3_5- x4_5) * (x3_5-x4_5) + 0.25*(x4_4-x4_5) *
           (x4_4-x4_5) - 0.012345679012345678*x4_5 + 0.25*(x5_6-x4_6) *
           (x5_6-x4_6) + 0.25*(x4_7-x4_6) * (x4_7-x4_6) + 0.25*(x3_6- x4_6)
           * (x3_6-x4_6) + 0.25*(x4_5-x4_6) * (x4_5-x4_6) -
           0.012345679012345678*x4_6 + 0.25*(x5_7-x4_7) * (x5_7-x4_7) +
           0.25*(x4_8-x4_7) * (x4_8-x4_7) + 0.25*(x3_7- x4_7) * (x3_7-x4_7)
           + 0.25*(x4_6-x4_7) * (x4_6-x4_7) - 0.012345679012345678*x4_7 +
           0.25*(x5_8-x4_8) * (x5_8-x4_8) + 0.25*(x4_9-x4_8) * (x4_9-x4_8)
           + 0.25*(x3_8- x4_8) * (x3_8-x4_8) + 0.25*(x4_7-x4_8) *
           (x4_7-x4_8) - 0.012345679012345678*x4_8 + 0.25*(x5_9-x4_9) *
           (x5_9-x4_9) + 0.25*(x4_10-x4_9) * (x4_10-x4_9) + 0.25*(x3_9-
           x4_9) * (x3_9-x4_9) + 0.25*(x4_8-x4_9) * (x4_8-x4_9) -
           0.012345679012345678*x4_9 + 0.25*(x6_2-x5_2) * (x6_2-x5_2) +
           0.25*(x5_3-x5_2) * (x5_3- x5_2) + 0.25*(x4_2-x5_2) * (x4_2-x5_2)
           + 0.25*(x5_1-x5_2) * (x5_1- x5_2) - 0.012345679012345678*x5_2 +
           0.25*(x6_3-x5_3) * (x6_3-x5_3) + 0.25*(x5_4-x5_3) * (x5_4-x5_3)
           + 0.25*(x4_3-x5_3) * (x4_3-x5_3) + 0.25*(x5_2- x5_3) *
           (x5_2-x5_3) - 0.012345679012345678*x5_3 + 0.25*(x6_4-x5_4) *
           (x6_4-x5_4) + 0.25*(x5_5-x5_4) * (x5_5-x5_4) + 0.25*(x4_4-x5_4)
           * (x4_4-x5_4) + 0.25*(x5_3- x5_4) * (x5_3-x5_4) -
           0.012345679012345678*x5_4 + 0.25*(x6_5-x5_5) * (x6_5-x5_5) +
           0.25*(x5_6-x5_5) * (x5_6-x5_5) + 0.25*(x4_5-x5_5) * (x4_5-x5_5)
           + 0.25*(x5_4- x5_5) * (x5_4-x5_5) - 0.012345679012345678*x5_5 +
           0.25*(x6_6-x5_6) * (x6_6-x5_6) + 0.25*(x5_7-x5_6) * (x5_7-x5_6)
           + 0.25*(x4_6-x5_6) * (x4_6-x5_6) + 0.25*(x5_5- x5_6) *
           (x5_5-x5_6) - 0.012345679012345678*x5_6 + 0.25*(x6_7-x5_7) *
           (x6_7-x5_7) + 0.25*(x5_8-x5_7) * (x5_8-x5_7) + 0.25*(x4_7-x5_7)
           * (x4_7-x5_7) + 0.25*(x5_6- x5_7) * (x5_6-x5_7) -
           0.012345679012345678*x5_7 + 0.25*(x6_8-x5_8) * (x6_8-x5_8) +
           0.25*(x5_9-x5_8) * (x5_9-x5_8) + 0.25*(x4_8-x5_8) * (x4_8-x5_8)
           + 0.25*(x5_7- x5_8) * (x5_7-x5_8) - 0.012345679012345678*x5_8 +
           0.25*(x6_9-x5_9) * (x6_9-x5_9) + 0.25*(x5_10-x5_9) *
           (x5_10-x5_9) + 0.25*(x4_9-x5_9) * (x4_9-x5_9) + 0.25*(x5_8-
           x5_9) * (x5_8-x5_9) - 0.012345679012345678*x5_9 +
           0.25*(x7_2-x6_2) * (x7_2-x6_2) + 0.25*(x6_3-x6_2) * (x6_3-x6_2)
           + 0.25*(x5_2-x6_2) * (x5_2- x6_2) + 0.25*(x6_1-x6_2) *
           (x6_1-x6_2) - 0.012345679012345678*x6_2 + 0.25*(x7_3-x6_3) *
           (x7_3-x6_3) + 0.25*(x6_4-x6_3) * (x6_4-x6_3) + 0.25*(x5_3- x6_3)
           * (x5_3-x6_3) + 0.25*(x6_2-x6_3) * (x6_2-x6_3) -
           0.012345679012345678*x6_3 + 0.25*(x7_4-x6_4) * (x7_4-x6_4) +
           0.25*(x6_5-x6_4) * (x6_5-x6_4) + 0.25*(x5_4- x6_4) * (x5_4-x6_4)
           + 0.25*(x6_3-x6_4) * (x6_3-x6_4) - 0.012345679012345678*x6_4 +
           0.25*(x7_5-x6_5) * (x7_5-x6_5) + 0.25*(x6_6-x6_5) * (x6_6-x6_5)
           + 0.25*(x5_5- x6_5) * (x5_5-x6_5) + 0.25*(x6_4-x6_5) *
           (x6_4-x6_5) - 0.012345679012345678*x6_5 + 0.25*(x7_6-x6_6) *
           (x7_6-x6_6) + 0.25*(x6_7-x6_6) * (x6_7-x6_6) + 0.25*(x5_6- x6_6)
           * (x5_6-x6_6) + 0.25*(x6_5-x6_6) * (x6_5-x6_6) -
           0.012345679012345678*x6_6 + 0.25*(x7_7-x6_7) * (x7_7-x6_7) +
           0.25*(x6_8-x6_7) * (x6_8-x6_7) + 0.25*(x5_7- x6_7) * (x5_7-x6_7)
           + 0.25*(x6_6-x6_7) * (x6_6-x6_7) - 0.012345679012345678*x6_7 +
           0.25*(x7_8-x6_8) * (x7_8-x6_8) + 0.25*(x6_9-x6_8) * (x6_9-x6_8)
           + 0.25*(x5_8- x6_8) * (x5_8-x6_8) + 0.25*(x6_7-x6_8) *
           (x6_7-x6_8) - 0.012345679012345678*x6_8 + 0.25*(x7_9-x6_9) *
           (x7_9-x6_9) + 0.25*(x6_10-x6_9) * (x6_10-x6_9) + 0.25*(x5_9-
           x6_9) * (x5_9-x6_9) + 0.25*(x6_8-x6_9) * (x6_8-x6_9) -
           0.012345679012345678*x6_9 + 0.25*(x8_2-x7_2) * (x8_2-x7_2) +
           0.25*(x7_3-x7_2) * (x7_3-x7_2) + 0.25*(x6_2- x7_2) * (x6_2-x7_2)
           + 0.25*(x7_1-x7_2) * (x7_1-x7_2) - 0.012345679012345678*x7_2 +
           0.25*(x8_3-x7_3) * (x8_3-x7_3) + 0.25*(x7_4-x7_3) * (x7_4-x7_3)
           + 0.25*(x6_3- x7_3) * (x6_3-x7_3) + 0.25*(x7_2-x7_3) *
           (x7_2-x7_3) - 0.012345679012345678*x7_3 + 0.25*(x8_4-x7_4) *
           (x8_4-x7_4) + 0.25*(x7_5-x7_4) * (x7_5-x7_4) + 0.25*(x6_4- x7_4)
           * (x6_4-x7_4) + 0.25*(x7_3-x7_4) * (x7_3-x7_4) -
           0.012345679012345678*x7_4 + 0.25*(x8_5-x7_5) * (x8_5-x7_5) +
           0.25*(x7_6-x7_5) * (x7_6-x7_5) + 0.25*(x6_5- x7_5) * (x6_5-x7_5)
           + 0.25*(x7_4-x7_5) * (x7_4-x7_5) - 0.012345679012345678*x7_5 +
           0.25*(x8_6-x7_6) * (x8_6-x7_6) + 0.25*(x7_7-x7_6) * (x7_7-x7_6)
           + 0.25*(x6_6- x7_6) * (x6_6-x7_6) + 0.25*(x7_5-x7_6) *
           (x7_5-x7_6) - 0.012345679012345678*x7_6 + 0.25*(x8_7-x7_7) *
           (x8_7-x7_7) + 0.25*(x7_8-x7_7) * (x7_8-x7_7) + 0.25*(x6_7- x7_7)
           * (x6_7-x7_7) + 0.25*(x7_6-x7_7) * (x7_6-x7_7) -
           0.012345679012345678*x7_7 + 0.25*(x8_8-x7_8) * (x8_8-x7_8) +
           0.25*(x7_9-x7_8) * (x7_9-x7_8) + 0.25*(x6_8- x7_8) * (x6_8-x7_8)
           + 0.25*(x7_7-x7_8) * (x7_7-x7_8) - 0.012345679012345678*x7_8 +
           0.25*(x8_9-x7_9) * (x8_9-x7_9) + 0.25*(x7_10-x7_9) *
           (x7_10-x7_9) + 0.25*(x6_9- x7_9) * (x6_9-x7_9) +
           0.25*(x7_8-x7_9) * (x7_8-x7_9) - 0.012345679012345678*x7_9 +
           0.25*(x9_2-x8_2) * (x9_2-x8_2) + 0.25*(x8_3-x8_2) * (x8_3- x8_2)
           + 0.25*(x7_2-x8_2) * (x7_2-x8_2) + 0.25*(x8_1-x8_2) * (x8_1-
           x8_2) - 0.012345679012345678*x8_2 + 0.25*(x9_3-x8_3) *
           (x9_3-x8_3) + 0.25*(x8_4-x8_3) * (x8_4-x8_3) + 0.25*(x7_3-x8_3)
           * (x7_3-x8_3) + 0.25*(x8_2- x8_3) * (x8_2-x8_3) -
           0.012345679012345678*x8_3 + 0.25*(x9_4-x8_4) * (x9_4-x8_4) +
           0.25*(x8_5-x8_4) * (x8_5-x8_4) + 0.25*(x7_4-x8_4) * (x7_4-x8_4)
           + 0.25*(x8_3- x8_4) * (x8_3-x8_4) - 0.012345679012345678*x8_4 +
           0.25*(x9_5-x8_5) * (x9_5-x8_5) + 0.25*(x8_6-x8_5) * (x8_6-x8_5)
           + 0.25*(x7_5-x8_5) * (x7_5-x8_5) + 0.25*(x8_4- x8_5) *
           (x8_4-x8_5) - 0.012345679012345678*x8_5 + 0.25*(x9_6-x8_6) *
           (x9_6-x8_6) + 0.25*(x8_7-x8_6) * (x8_7-x8_6) + 0.25*(x7_6-x8_6)
           * (x7_6-x8_6) + 0.25*(x8_5- x8_6) * (x8_5-x8_6) -
           0.012345679012345678*x8_6 + 0.25*(x9_7-x8_7) * (x9_7-x8_7) +
           0.25*(x8_8-x8_7) * (x8_8-x8_7) + 0.25*(x7_7-x8_7) * (x7_7-x8_7)
           + 0.25*(x8_6- x8_7) * (x8_6-x8_7) - 0.012345679012345678*x8_7 +
           0.25*(x9_8-x8_8) * (x9_8-x8_8) + 0.25*(x8_9-x8_8) * (x8_9-x8_8)
           + 0.25*(x7_8-x8_8) * (x7_8-x8_8) + 0.25*(x8_7- x8_8) *
           (x8_7-x8_8) - 0.012345679012345678*x8_8 + 0.25*(x9_9-x8_9) *
           (x9_9-x8_9) + 0.25*(x8_10-x8_9) * (x8_10-x8_9) +
           0.25*(x7_9-x8_9) * (x7_9-x8_9) + 0.25*(x8_8- x8_9) * (x8_8-x8_9)
           - 0.012345679012345678*x8_9 + 0.25*(x10_2-x9_2) * (x10_2-x9_2) +
           0.25*(x9_3-x9_2) * (x9_3-x9_2) + 0.25*(x8_2-x9_2) * (x8_2- x9_2)
           + 0.25*(x9_1-x9_2) * (x9_1-x9_2) - 0.012345679012345678*x9_2 +
           0.25*(x10_3-x9_3) * (x10_3-x9_3) + 0.25*(x9_4-x9_3) *
           (x9_4-x9_3) + 0.25*(x8_3- x9_3) * (x8_3-x9_3) + 0.25*(x9_2-x9_3)
           * (x9_2-x9_3) - 0.012345679012345678*x9_3 + 0.25*(x10_4-x9_4) *
           (x10_4-x9_4) + 0.25*(x9_5-x9_4) * (x9_5- x9_4) +
           0.25*(x8_4-x9_4) * (x8_4-x9_4) + 0.25*(x9_3-x9_4) * (x9_3- x9_4)
           - 0.012345679012345678*x9_4 + 0.25*(x10_5-x9_5) * (x10_5-x9_5) +
           0.25*(x9_6-x9_5) * (x9_6-x9_5) + 0.25*(x8_5-x9_5) * (x8_5-x9_5)
           + 0.25*(x9_4- x9_5) * (x9_4-x9_5) - 0.012345679012345678*x9_5 +
           0.25*(x10_6-x9_6) * (x10_6- x9_6) + 0.25*(x9_7-x9_6) *
           (x9_7-x9_6) + 0.25*(x8_6-x9_6) * (x8_6- x9_6) + 0.25*(x9_5-x9_6)
           * (x9_5-x9_6) - 0.012345679012345678*x9_6 + 0.25*(x10_7-x9_7) *
           (x10_7-x9_7) + 0.25*(x9_8-x9_7) * (x9_8-x9_7) + 0.25*(x8_7-
           x9_7) * (x8_7-x9_7) + 0.25*(x9_6-x9_7) * (x9_6-x9_7) -
           0.012345679012345678*x9_7 + 0.25*(x10_8-x9_8) * (x10_8-x9_8) +
           0.25*(x9_9-x9_8) * (x9_9- x9_8) + 0.25*(x8_8-x9_8) * (x8_8-x9_8)
           + 0.25*(x9_7-x9_8) * (x9_7- x9_8) - 0.012345679012345678*x9_8 +
           0.25*(x10_9-x9_9) * (x10_9-x9_9) + 0.25*(x9_10-x9_9) *
           (x9_10-x9_9) + 0.25*(x8_9-x9_9) * (x8_9- x9_9) +
           0.25*(x9_8-x9_9) * (x9_8-x9_9) - 0.012345679012345678*x9_9;

        x1_1.up = 0.0 ;  x2_1.up = 0.0 ;  x3_1.up = 0.0 ;   x4_1.up = 0.0 ;
        x5_1.up = 0.0 ;  x6_1.up = 0.0 ;  x7_1.up = 0.0 ;   x8_1.up = 0.0 ;
        x9_1.up = 0.0 ; x10_1.up = 0.0 ;  x1_2.up = 0.0 ;  x10_2.up = 0.0 ;
        x1_3.up = 0.0 ; x10_3.up = 0.0 ;  x1_4.up = 0.0 ;  x10_4.up = 0.0 ;
        x1_5.up = 0.0 ; x10_5.up = 0.0 ;  x1_6.up = 0.0 ;  x10_6.up = 0.0 ;
        x1_7.up = 0.0 ; x10_7.up = 0.0 ;  x1_8.up = 0.0 ;  x10_8.up = 0.0 ;
        x1_9.up = 0.0 ; x10_9.up = 0.0 ; x1_10.up = 0.0 ;  x2_10.up = 0.0 ;
       x3_10.up = 0.0 ; x4_10.up = 0.0 ; x5_10.up = 0.0 ;  x6_10.up = 0.0 ;
       x7_10.up = 0.0 ; x8_10.up = 0.0 ; x9_10.up = 0.0 ; x10_10.up = 0.0 ;

  x2_2.lo = 0.12479984873691263 ; x2_2.up = 2000.0 ;
  x3_2.lo = 0.23398804469358137 ; x3_2.up = 2000.0 ;
  x4_2.lo = 0.3139058517398832  ; x4_2.up = 2000.0 ;
  x5_2.lo = 0.3545560698215495  ; x5_2.up = 2000.0 ;
  x6_2.lo = 0.3508536199376434  ; x6_2.up = 2000.0 ;
  x7_2.lo = 0.3032616545888193  ; x7_2.up = 2000.0 ;
  x8_2.lo = 0.21773362039921149 ; x8_2.up = 2000.0 ;
  x9_2.lo = 0.10496852050270804 ; x9_2.up = 2000.0 ;
  x2_3.lo = 0.23300819370293196 ; x2_3.up = 2000.0 ;
  x3_3.lo = 0.4368685715081827  ; x3_3.up = 2000.0 ;
  x4_3.lo = 0.5860795205039124  ; x4_3.up = 2000.0 ;
  x5_3.lo = 0.6619757173719604  ; x5_3.up = 2000.0 ;
  x6_3.lo = 0.6550630394444155  ; x6_3.up = 2000.0 ;
  x7_3.lo = 0.5662062179583643  ; x7_3.up = 2000.0 ;
  x8_3.lo = 0.4065206657787749  ; x8_3.up = 2000.0 ;
  x9_3.lo = 0.19598201124077938 ; x9_3.up = 2000.0 ;
  x2_4.lo = 0.3102392869847688  ; x2_4.up = 2000.0 ;
  x3_4.lo = 0.5816696485083634  ; x3_4.up = 2000.0 ;
  x4_4.lo = 0.780336904329305   ; x4_4.up = 2000.0 ;
  x5_4.lo = 0.881389067461466   ; x5_4.up = 2000.0 ;
  x6_4.lo = 0.8721851667860628  ; x6_4.up = 2000.0 ;
  x7_4.lo = 0.7538765506662748  ; x7_4.up = 2000.0 ;
  x8_4.lo = 0.541262860723999   ; x8_4.up = 2000.0 ;
  x9_4.lo = 0.2609406925264503  ; x9_4.up = 2000.0 ;
  x2_5.lo = 0.3462256483860566  ; x2_5.up = 2000.0 ;
  x3_5.lo = 0.649140710574109   ; x3_5.up = 2000.0 ;
  x4_5.lo = 0.8708524741879191  ; x4_5.up = 2000.0 ;
  x5_5.lo = 0.9836262335698625  ; x5_5.up = 2000.0 ;
  x6_5.lo = 0.9733547218280928  ; x6_5.up = 2000.0 ;
  x7_5.lo = 0.8413228385555475  ; x7_5.up = 2000.0 ;
  x8_5.lo = 0.6040469172128375  ; x8_5.up = 2000.0 ;
  x9_5.lo = 0.2912086387843985  ; x9_5.up = 2000.0 ;
  x2_6.lo = 0.3361830745849718  ; x2_6.up = 2000.0 ;
  x3_6.lo = 0.6303118239112697  ; x3_6.up = 2000.0 ;
  x4_6.lo = 0.8455926464349569  ; x4_6.up = 2000.0 ;
  x5_6.lo = 0.9550953055772204  ; x5_6.up = 2000.0 ;
  x6_6.lo = 0.9451217279001172  ; x6_6.up = 2000.0 ;
  x7_6.lo = 0.8169195433747376  ; x7_6.up = 2000.0 ;
  x8_6.lo = 0.586526014952403   ; x8_6.up = 2000.0 ;
  x9_6.lo = 0.2827618808387109  ; x9_6.up = 2000.0 ;
  x2_7.lo = 0.2814466745802556  ; x2_7.up = 2000.0 ;
  x3_7.lo = 0.5276861930287452  ; x3_7.up = 2000.0 ;
  x4_7.lo = 0.7079155864180293  ; x4_7.up = 2000.0 ;
  x5_7.lo = 0.7995893249348552  ; x5_7.up = 2000.0 ;
  x6_7.lo = 0.791239617638157   ; x6_7.up = 2000.0 ;
  x7_7.lo = 0.6839109588318302  ; x7_7.up = 2000.0 ;
  x8_7.lo = 0.49102946859223695 ; x8_7.up = 2000.0 ;
  x9_7.lo = 0.23672337210420408 ; x9_7.up = 2000.0 ;
  x2_8.lo = 0.1892933737550295  ; x2_8.up = 2000.0 ;
  x3_8.lo = 0.35490737245813725 ; x3_8.up = 2000.0 ;
  x4_8.lo = 0.47612475751113287 ; x4_8.up = 2000.0 ;
  x5_8.lo = 0.5377820191379283  ; x5_8.up = 2000.0 ;
  x6_8.lo = 0.5321662332473465  ; x6_8.up = 2000.0 ;
  x7_8.lo = 0.4599798982822882  ; x7_8.up = 2000.0 ;
  x8_8.lo = 0.33025305721442866 ; x8_8.up = 2000.0 ;
  x9_8.lo = 0.15921369765374235 ; x9_8.up = 2000.0 ;
  x2_9.lo = 0.07197448373840569 ; x2_9.up = 2000.0 ;
  x3_9.lo = 0.13494542572148427 ; x3_9.up = 2000.0 ;
  x4_9.lo = 0.18103556895385975 ; x4_9.up = 2000.0 ;
  x5_9.lo = 0.20447933503124735 ; x5_9.up = 2000.0 ;
  x6_9.lo = 0.20234406065665073 ; x6_9.up = 2000.0 ;
  x7_9.lo = 0.1748968548247052  ; x7_9.up = 2000.0 ;
  x8_9.lo = 0.12557118521644556 ; x8_9.up = 2000.0 ;
  x9_9.lo = 0.06053737363010177 ; x9_9.up = 2000.0 ;

  x2_2.l = 0.12479984873691263 ;
  x3_2.l = 0.23398804469358137 ;
  x4_2.l = 0.3139058517398832  ;
  x5_2.l = 0.3545560698215495  ;
  x6_2.l = 0.3508536199376434  ;
  x7_2.l = 0.3032616545888193  ;
  x8_2.l = 0.21773362039921149 ;
  x9_2.l = 0.10496852050270804 ;
  x2_3.l = 0.23300819370293196 ;
  x3_3.l = 0.4368685715081827  ;
  x4_3.l = 0.5860795205039124  ;
  x5_3.l = 0.6619757173719604  ;
  x6_3.l = 0.6550630394444155  ;
  x7_3.l = 0.5662062179583643  ;
  x8_3.l = 0.4065206657787749  ;
  x9_3.l = 0.19598201124077938 ;
  x2_4.l = 0.3102392869847688  ;
  x3_4.l = 0.5816696485083634  ;
  x4_4.l = 0.780336904329305   ;
  x5_4.l = 0.881389067461466   ;
  x6_4.l = 0.8721851667860628  ;
  x7_4.l = 0.7538765506662748  ;
  x8_4.l = 0.541262860723999   ;
  x9_4.l = 0.2609406925264503  ;
  x2_5.l = 0.3462256483860566  ;
  x3_5.l = 0.649140710574109   ;
  x4_5.l = 0.8708524741879191  ;
  x5_5.l = 0.9836262335698625  ;
  x6_5.l = 0.9733547218280928  ;
  x7_5.l = 0.8413228385555475  ;
  x8_5.l = 0.6040469172128375  ;
  x9_5.l = 0.2912086387843985  ;
  x2_6.l = 0.3361830745849718  ;
  x3_6.l = 0.6303118239112697  ;
  x4_6.l = 0.8455926464349569  ;
  x5_6.l = 0.9550953055772204  ;
  x6_6.l = 0.9451217279001172  ;
  x7_6.l = 0.8169195433747376  ;
  x8_6.l = 0.586526014952403   ;
  x9_6.l = 0.2827618808387109  ;
  x2_7.l = 0.2814466745802556  ;
  x3_7.l = 0.5276861930287452  ;
  x4_7.l = 0.7079155864180293  ;
  x5_7.l = 0.7995893249348552  ;
  x6_7.l = 0.791239617638157   ;
  x7_7.l = 0.6839109588318302  ;
  x8_7.l = 0.49102946859223695 ;
  x9_7.l = 0.23672337210420408 ;
  x2_8.l = 0.1892933737550295  ;
  x3_8.l = 0.35490737245813725 ;
  x4_8.l = 0.47612475751113287 ;
  x5_8.l = 0.5377820191379283  ;
  x6_8.l = 0.5321662332473465  ;
  x7_8.l = 0.4599798982822882  ;
  x8_8.l = 0.33025305721442866 ;
  x9_8.l = 0.15921369765374235 ;
  x2_9.l = 0.07197448373840569 ;
  x3_9.l = 0.13494542572148427 ;
  x4_9.l = 0.18103556895385975 ;
  x5_9.l = 0.20447933503124735 ;
  x6_9.l = 0.20234406065665073 ;
  x7_9.l = 0.1748968548247052  ;
  x8_9.l = 0.12557118521644556 ;
  x9_9.l = 0.06053737363010177 ;

Model obstclal /all/ ;

Solve obstclal using nlp minimazing obj ;

     display  x1_1.l ;  display x2_1.l ; display  x3_1.l ; display   x4_1.l ;
     display  x5_1.l ;  display x6_1.l ; display  x7_1.l ; display   x8_1.l ;
     display  x9_1.l ; display x10_1.l ; display  x1_2.l ; display   x2_2.l ;
     display  x3_2.l ;  display x4_2.l ; display  x5_2.l ; display   x6_2.l ;
     display  x7_2.l ;  display x8_2.l ; display  x9_2.l ; display  x10_2.l ;
     display  x1_3.l ;  display x2_3.l ; display  x3_3.l ; display   x4_3.l ;
     display  x5_3.l ;  display x6_3.l ; display  x7_3.l ; display   x8_3.l ;
     display  x9_3.l ; display x10_3.l ; display  x1_4.l ; display   x2_4.l ;
     display  x3_4.l ;  display x4_4.l ; display  x5_4.l ; display   x6_4.l ;
     display  x7_4.l ;  display x8_4.l ; display  x9_4.l ; display  x10_4.l ;
     display  x1_5.l ;  display x2_5.l ; display  x3_5.l ; display   x4_5.l ;
     display  x5_5.l ;  display x6_5.l ; display  x7_5.l ; display   x8_5.l ;
     display  x9_5.l ; display x10_5.l ; display  x1_6.l ; display   x2_6.l ;
     display  x3_6.l ;  display x4_6.l ; display  x5_6.l ; display   x6_6.l ;
     display  x7_6.l ;  display x8_6.l ; display  x9_6.l ; display  x10_6.l ;
     display  x1_7.l ;  display x2_7.l ; display  x3_7.l ; display   x4_7.l ;
     display  x5_7.l ;  display x6_7.l ; display  x7_7.l ; display   x8_7.l ;
     display  x9_7.l ; display x10_7.l ; display  x1_8.l ; display   x2_8.l ;
     display  x3_8.l ;  display x4_8.l ; display  x5_8.l ; display   x6_8.l ;
     display  x7_8.l ;  display x8_8.l ; display  x9_8.l ; display  x10_8.l ;
     display  x1_9.l ;  display x2_9.l ; display  x3_9.l ; display   x4_9.l ;
     display  x5_9.l ;  display x6_9.l ; display  x7_9.l ; display   x8_9.l ;
     display  x9_9.l ; display x10_9.l ; display x1_10.l ; display  x2_10.l ;
     display x3_10.l ; display x4_10.l ; display x5_10.l ; display  x6_10.l ;
     display x7_10.l ; display x8_10.l ; display x9_10.l ; display x10_10.l ;
     display   obj.l ;

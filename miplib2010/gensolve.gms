*
* Generic input file name for instances generated by mps2gms
*
$onEmpty
sets i        all rows in MPS order
     ig(i)    greater-than-or equal rows
     il(i)    less-than-or equal rows
     ie(i)    equality rows
     ir(i)    ranged rows
     ik(i)    cones / /;

sets j        all columns in MPS order
     jc (j)   continuous columns
     jb (j)   binary columns
     ji (j)   integer columns
     jsc(j)   semi-continuous columns
     jsi(j)   semi-integer columns
     s        sos sets
     js1(s,j) sos 1 columns
     js2(s,j) sos 2 columns;

sets e(e)     equ name stems / /
     v(v)     var name stems / /
     ei(e,i)  equ type mapping / /

alias(j,jj),(v,vv),(js1,jss1),(js2,jss2),(s,ss);

parameters  c(j)        objective coefs
            cobj        objective constant
            b(i)        right hand sides
            ac (i,jc)   matrix coefs: continuous variables
            ab (i,jb)   matrix coefs: binary variables
            ai (i,ji)   matrix coefs: integer variables
            asc(i,jsc)  matrix coefs: semi-continuous variables
            asi(i,jsi)  matrix coefs: semi-integer variables
            as1(i,s,j)  matrix coefs: sos 1 variables
            as2(i,s,j)  matrix coefs: sos 2 variables;

parameters  qobj(    v,jj,vv,jj) Q term for objective / /
            q   (e,i,v,jj,vv,jj) Q terms by equ type / /;
$offEmpty            

equations eobj   objective function
          eg(i)  greater-than-or equal equs
          el(i)  less-than-or equal equs
          ee(i)  equality equs
          er(i)  ranged equs;

         variables obj        objective variable
positive variables xc (j)     continuous variables
                   r  (i)     ranged row variables
binary   variables xb (j)     binary variables
integer  variables xi (j)     integer variables
semicont variables xsc(j)     semi-continuous variables
semiint  variables xsi(j)     semi-integer variables
sos1     variables xs1(s,j)   sos 1 variables
sos2     variables xs2(s,j)   sos 2 variables;

$if not set iname $abort No instance file name given add --iname=<fn> to the command line
$gdxin "%iname%"
$load i j  s 
$load ig il ie ir
$load jc jb ji jsc jsi js1 js2
$load cobj c b
$load ac ab ai asc asi as1 as2
$load xc xb xi xsc xsi xs1 xs2 r
* Newer GDX instance format
$if gdxSymExist e $loadM e v ei qobj q ik
$ifE card(ik)>0 $abort 'Cone constraints =C= not supported'

$gdxin

$onText
$gdxin %gdxfile%.gdx
$load i j mps2gdx s mps2gdxstats
$load ig il ie ir
$load jc jb ji jsc jsi js1 js2
$load cobj c b
$load ac ab ai asc asi as1 as2
$load xc xb xi xsc xsi xs1 xs2 r
$gdxin
$offText

$eval haveQOBJ card(qobj)<>0
$eval haveQEQU card(q)<>0

$set qpart "%gams.scrdir%qpart.%gams.scrext%"
$onechoV > "%qpart%"
$setargs q e
  + sum((j,jj)                $%q%(%e%" xc" ,j," xc" ,jj), 0.5*%q%(%e%" xc" ,j," xc" ,jj)*xc(j)    *xc (jj ))
  + sum((j,jj)                $%q%(%e%" xc" ,j," xb" ,jj), 0.5*%q%(%e%" xc" ,j," xb" ,jj)*xc(j)    *xb (jj ))
  + sum((j,jj)                $%q%(%e%" xc" ,j," xi" ,jj), 0.5*%q%(%e%" xc" ,j," xi" ,jj)*xc(j)    *xi (jj ))
  + sum((j,jj)                $%q%(%e%" xc" ,j," xsc",jj), 0.5*%q%(%e%" xc" ,j," xsc",jj)*xc(j)    *xsc(jj ))
  + sum((j,jj)                $%q%(%e%" xc" ,j," xsi",jj), 0.5*%q%(%e%" xc" ,j," xsi",jj)*xc(j)    *xsi(jj ))
  + sum((j,js1(s,jj))         $%q%(%e%" xc" ,j," xs1",jj), 0.5*%q%(%e%" xc" ,j," xs1",jj)*xc(j)    *xs1(js1))
  + sum((j,js2(s,jj))         $%q%(%e%" xc" ,j," xs2",jj), 0.5*%q%(%e%" xc" ,j," xs2",jj)*xc(j)    *xs2(js2))
  + sum((j,jj)                $%q%(%e%" xb" ,j," xc" ,jj), 0.5*%q%(%e%" xb" ,j," xc" ,jj)*xb(j)    *xc (jj ))
  + sum((j,jj)                $%q%(%e%" xb" ,j," xb" ,jj), 0.5*%q%(%e%" xb" ,j," xb" ,jj)*xb(j)    *xb (jj ))
  + sum((j,jj)                $%q%(%e%" xb" ,j," xi" ,jj), 0.5*%q%(%e%" xb" ,j," xi" ,jj)*xb(j)    *xi (jj ))
  + sum((j,jj)                $%q%(%e%" xb" ,j," xsc",jj), 0.5*%q%(%e%" xb" ,j," xsc",jj)*xb(j)    *xsc(jj ))
  + sum((j,jj)                $%q%(%e%" xb" ,j," xsi",jj), 0.5*%q%(%e%" xb" ,j," xsi",jj)*xb(j)    *xsi(jj ))
  + sum((j,js1(s,jj))         $%q%(%e%" xb" ,j," xs1",jj), 0.5*%q%(%e%" xb" ,j," xs1",jj)*xb(j)    *xs1(js1))
  + sum((j,js2(s,jj))         $%q%(%e%" xb" ,j," xs2",jj), 0.5*%q%(%e%" xb" ,j," xs2",jj)*xb(j)    *xs2(js2))
  + sum((j,jj)                $%q%(%e%" xi" ,j," xc" ,jj), 0.5*%q%(%e%" xi" ,j," xc" ,jj)*xi(j)    *xc (jj ))
  + sum((j,jj)                $%q%(%e%" xi" ,j," xb" ,jj), 0.5*%q%(%e%" xi" ,j," xb" ,jj)*xi(j)    *xb (jj ))
  + sum((j,jj)                $%q%(%e%" xi" ,j," xi" ,jj), 0.5*%q%(%e%" xi" ,j," xi" ,jj)*xi(j)    *xi (jj ))
  + sum((j,jj)                $%q%(%e%" xi" ,j," xsc",jj), 0.5*%q%(%e%" xi" ,j," xsc",jj)*xi(j)    *xsc(jj ))
  + sum((j,jj)                $%q%(%e%" xi" ,j," xsi",jj), 0.5*%q%(%e%" xi" ,j," xsi",jj)*xi(j)    *xsi(jj ))
  + sum((j,js1(s,jj))         $%q%(%e%" xi" ,j," xs1",jj), 0.5*%q%(%e%" xi" ,j," xs1",jj)*xi(j)    *xs1(js1))
  + sum((j,js2(s,jj))         $%q%(%e%" xi" ,j," xs2",jj), 0.5*%q%(%e%" xi" ,j," xs2",jj)*xi(j)    *xs2(js2))
  + sum((j,jj)                $%q%(%e%" xsc",j," xc" ,jj), 0.5*%q%(%e%" xsc",j," xc" ,jj)*xsc(j)   *xc (jj ))
  + sum((j,jj)                $%q%(%e%" xsc",j," xb" ,jj), 0.5*%q%(%e%" xsc",j," xb" ,jj)*xsc(j)   *xb (jj ))
  + sum((j,jj)                $%q%(%e%" xsc",j," xi" ,jj), 0.5*%q%(%e%" xsc",j," xi" ,jj)*xsc(j)   *xi (jj ))
  + sum((j,jj)                $%q%(%e%" xsc",j," xsc",jj), 0.5*%q%(%e%" xsc",j," xsc",jj)*xsc(j)   *xsc(jj ))
  + sum((j,jj)                $%q%(%e%" xsc",j," xsi",jj), 0.5*%q%(%e%" xsc",j," xsi",jj)*xsc(j)   *xsi(jj ))
  + sum((j,js1(s,jj))         $%q%(%e%" xsc",j," xs1",jj), 0.5*%q%(%e%" xsc",j," xs1",jj)*xsc(j)   *xs1(js1))
  + sum((j,js2(s,jj))         $%q%(%e%" xsc",j," xs2",jj), 0.5*%q%(%e%" xsc",j," xs2",jj)*xsc(j)   *xs2(js2))
  + sum((j,jj)                $%q%(%e%" xsi",j," xc" ,jj), 0.5*%q%(%e%" xsi",j," xc" ,jj)*xsi(j)   *xc (jj ))
  + sum((j,jj)                $%q%(%e%" xsi",j," xb" ,jj), 0.5*%q%(%e%" xsi",j," xb" ,jj)*xsi(j)   *xb (jj ))
  + sum((j,jj)                $%q%(%e%" xsi",j," xi" ,jj), 0.5*%q%(%e%" xsi",j," xi" ,jj)*xsi(j)   *xi (jj ))
  + sum((j,jj)                $%q%(%e%" xsi",j," xsc",jj), 0.5*%q%(%e%" xsi",j," xsc",jj)*xsi(j)   *xsc(jj ))
  + sum((j,jj)                $%q%(%e%" xsi",j," xsi",jj), 0.5*%q%(%e%" xsi",j," xsi",jj)*xsi(j)   *xsi(jj ))
  + sum((j,js1(s,jj))         $%q%(%e%" xsi",j," xs1",jj), 0.5*%q%(%e%" xsi",j," xs1",jj)*xsi(j)   *xs1(js1))
  + sum((j,js2(s,jj))         $%q%(%e%" xsi",j," xs2",jj), 0.5*%q%(%e%" xsi",j," xs2",jj)*xsi(j)   *xs2(js2))
  + sum((jss1(ss,j),jj)       $%q%(%e%" xs1",j," xc" ,jj), 0.5*%q%(%e%" xs1",j," xc" ,jj)*xs1(jss1)*xc (jj ))
  + sum((jss1(ss,j),jj)       $%q%(%e%" xs1",j," xb" ,jj), 0.5*%q%(%e%" xs1",j," xb" ,jj)*xs1(jss1)*xb (jj ))
  + sum((jss1(ss,j),jj)       $%q%(%e%" xs1",j," xi" ,jj), 0.5*%q%(%e%" xs1",j," xi" ,jj)*xs1(jss1)*xi (jj ))
  + sum((jss1(ss,j),jj)       $%q%(%e%" xs1",j," xsc",jj), 0.5*%q%(%e%" xs1",j," xsc",jj)*xs1(jss1)*xsc(jj ))
  + sum((jss1(ss,j),jj)       $%q%(%e%" xs1",j," xsi",jj), 0.5*%q%(%e%" xs1",j," xsi",jj)*xs1(jss1)*xsi(jj ))
  + sum((jss1(ss,j),js1(s,jj))$%q%(%e%" xs1",j," xs1",jj), 0.5*%q%(%e%" xs1",j," xs1",jj)*xs1(jss1)*xs1(js1))
  + sum((jss1(ss,j),js2(s,jj))$%q%(%e%" xs1",j," xs2",jj), 0.5*%q%(%e%" xs1",j," xs2",jj)*xs1(jss1)*xs2(js2))
  + sum((jss2(ss,j),jj)       $%q%(%e%" xs2",j," xc" ,jj), 0.5*%q%(%e%" xs2",j," xc" ,jj)*xs2(jss2)*xc (jj ))
  + sum((jss2(ss,j),jj)       $%q%(%e%" xs2",j," xb" ,jj), 0.5*%q%(%e%" xs2",j," xb" ,jj)*xs2(jss2)*xb (jj ))
  + sum((jss2(ss,j),jj)       $%q%(%e%" xs2",j," xi" ,jj), 0.5*%q%(%e%" xs2",j," xi" ,jj)*xs2(jss2)*xi (jj ))
  + sum((jss2(ss,j),jj)       $%q%(%e%" xs2",j," xsc",jj), 0.5*%q%(%e%" xs2",j," xsc",jj)*xs2(jss2)*xsc(jj ))
  + sum((jss2(ss,j),jj)       $%q%(%e%" xs2",j," xsi",jj), 0.5*%q%(%e%" xs2",j," xsi",jj)*xs2(jss2)*xsi(jj ))
  + sum((jss2(ss,j),js1(s,jj))$%q%(%e%" xs2",j," xs1",jj), 0.5*%q%(%e%" xs2",j," xs1",jj)*xs2(jss2)*xs1(js1))
  + sum((jss2(ss,j),js2(s,jj))$%q%(%e%" xs2",j," xs2",jj), 0.5*%q%(%e%" xs2",j," xs2",jj)*xs2(jss2)*xs2(js2))
$offecho

eobj.. obj =e= sum(jc,       c(jc  )*xc (jc ))
             + sum(jb,       c(jb  )*xb (jb ))
             + sum(ji,       c(ji  )*xi (ji ))
             + sum(jsc,      c(jsc )*xsc(jsc))
             + sum(jsi,      c(jsi )*xsi(jsi))
             + sum(js1(s,j), c(j)*xs1(js1))
             + sum(js2(s,j), c(j)*xs2(js2))
$if %haveQOBJ%==1 $batinclude "%qpart%" qobj
             + cobj;

eg(ig)..       sum(jc,  ac (ig,jc )*xc (jc ))
             + sum(jb,  ab (ig,jb )*xb (jb ))
             + sum(ji,  ai (ig,ji )*xi (ji ))
             + sum(jsc, asc(ig,jsc)*xsc(jsc))
             + sum(jsi, asi(ig,jsi)*xsi(jsi))
             + sum(js1, as1(ig,js1)*xs1(js1))
             + sum(js2, as2(ig,js2)*xs2(js2))
$if %haveQEQU%==1 $batinclude "%qpart%" q "' eg',ig,"
               =g= b(ig);

el(il)..       sum(jc,  ac (il,jc )*xc (jc ))
             + sum(jb,  ab (il,jb )*xb (jb ))
             + sum(ji,  ai (il,ji )*xi (ji ))
             + sum(jsc, asc(il,jsc)*xsc(jsc))
             + sum(jsi, asi(il,jsi)*xsi(jsi))
             + sum(js1, as1(il,js1)*xs1(js1))
             + sum(js2, as2(il,js2)*xs2(js2))
$if %haveQEQU%==1 $batinclude "%qpart%" q "' el',il,"
               =l= b(il);

ee(ie)..       sum(jc,  ac (ie,jc )*xc (jc ))
             + sum(jb,  ab (ie,jb )*xb (jb ))
             + sum(ji,  ai (ie,ji )*xi (ji ))
             + sum(jsc, asc(ie,jsc)*xsc(jsc))
             + sum(jsi, asi(ie,jsi)*xsi(jsi))
             + sum(js1, as1(ie,js1)*xs1(js1))
             + sum(js2, as2(ie,js2)*xs2(js2))
$if %haveQEQU%==1 $batinclude "%qpart%" q "' ee',ie,"
               =e= b(ie);

er(ir)..       sum(jc,  ac (ir,jc )*xc (jc ))
             + sum(jb,  ab (ir,jb )*xb (jb ))
             + sum(ji,  ai (ir,ji )*xi (ji ))
             + sum(jsc, asc(ir,jsc)*xsc(jsc))
             + sum(jsi, asi(ir,jsi)*xsi(jsi))
             + sum(js1, as1(ir,js1)*xs1(js1))
             + sum(js2, as2(ir,js2)*xs2(js2))
$if %haveQEQU%==1 $batinclude "%qpart%" q "' er',ir,"
               =e= r(ir);

model m / all /;

option limcol=0,limrow=0,solprint=off;

$set MTYPE MIQCP
$if %haveQOBJ%%haveQEQU%==00 $set MTYPE MIP
$ifE card(j)=card(jc) $set MTYPE r%MTYPE%
solve m using %MTYPE% minimizing obj;

